<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Wed Jul 12 23:25:08 2023
<BR><P>
<H3>Maximum Stack Usage =       2608 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; TCP_Program &rArr; TCP_Connect &rArr; ESP8266_Link_Server &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from gd32f4xx_it.o(i.BusFault_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[23]">CAN0_EWMC_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[21]">CAN0_RX0_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[22]">CAN0_RX1_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[20]">CAN0_TX_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[4f]">CAN1_EWMC_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[4d]">CAN1_RX0_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[4e]">CAN1_RX1_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[4c]">CAN1_TX_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[5b]">DCI_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[18]">DMA0_Channel0_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[19]">DMA0_Channel1_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel2_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel3_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[1c]">DMA0_Channel4_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[1d]">DMA0_Channel5_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[1e]">DMA0_Channel6_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[3c]">DMA0_Channel7_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[45]">DMA1_Channel0_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[46]">DMA1_Channel1_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[47]">DMA1_Channel2_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[48]">DMA1_Channel3_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[49]">DMA1_Channel4_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[51]">DMA1_Channel5_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[52]">DMA1_Channel6_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[53]">DMA1_Channel7_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from gd32f4xx_it.o(i.DebugMon_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[4a]">ENET_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[4b]">ENET_WKUP_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[3d]">EXMC_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[35]">EXTI10_15_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[24]">EXTI5_9_IRQHandler</a> from gd32f4xx_it.o(i.EXTI5_9_IRQHandler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[11]">FMC_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[5d]">FPU_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from gd32f4xx_it.o(i.HardFault_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[2d]">I2C0_ER_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[2c]">I2C0_EV_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[2f]">I2C1_ER_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[2e]">I2C1_EV_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[56]">I2C2_ER_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[55]">I2C2_EV_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[e]">LVD_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from gd32f4xx_it.o(i.MemManage_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from gd32f4xx_it.o(i.NMI_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from gd32f4xx_it.o(i.PendSV_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[12]">RCU_CTC_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[10]">RTC_WKUP_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[30]">SPI0_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[40]">SPI2_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from gd32f4xx_it.o(i.SVC_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from gd32f4xx_it.o(i.SysTick_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[5e]">SystemInit</a> from system_gd32f4xx.o(i.SystemInit) referenced from startup_gd32f407.o(.text)
 <LI><a href="#[f]">TAMPER_STAMP_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[25]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[28]">TIMER0_Channel_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[27]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[26]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[29]">TIMER1_IRQHandler</a> from timer.o(i.TIMER1_IRQHandler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[2a]">TIMER2_IRQHandler</a> from timer.o(i.TIMER2_IRQHandler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[2b]">TIMER3_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[3f]">TIMER4_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[43]">TIMER5_DAC_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[44]">TIMER6_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[38]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[3b]">TIMER7_Channel_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[3a]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[39]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[5c]">TRNG_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[41]">UART3_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[42]">UART4_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[32]">USART0_IRQHandler</a> from usart.o(i.USART0_IRQHandler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[33]">USART1_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[54]">USART5_IRQHandler</a> from usart.o(i.USART5_IRQHandler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[50]">USBFS_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[37]">USBFS_WKUP_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[58]">USBHS_EP1_In_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[57]">USBHS_EP1_Out_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[5a]">USBHS_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[59]">USBHS_WKUP_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from gd32f4xx_it.o(i.UsageFault_Handler) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[d]">WWDGT_IRQHandler</a> from startup_gd32f407.o(.text) referenced from startup_gd32f407.o(RESET)
 <LI><a href="#[66]">__main</a> from __main.o(!!!main) referenced from startup_gd32f407.o(.text)
 <LI><a href="#[63]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[61]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[60]">_sputc</a> from _sputc.o(.text) referenced 2 times from vsprintf.o(.text)
 <LI><a href="#[62]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[64]">my_mem_init</a> from malloc.o(i.my_mem_init) referenced from malloc.o(.data)
 <LI><a href="#[65]">my_mem_perused</a> from malloc.o(i.my_mem_perused) referenced from malloc.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[66]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[67]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[69]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[15f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[160]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6a]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[161]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6b]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[ad]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6d]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[6f]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[71]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[72]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[73]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[162]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[75]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[77]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[78]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[79]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[7b]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[7d]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[7f]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[80]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[81]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[83]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[163]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[85]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[87]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[89]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[8b]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[164]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[97]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[165]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[166]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[167]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[168]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[169]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[91]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[16a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[92]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[16c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[170]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[171]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[172]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[173]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[174]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[175]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[176]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[177]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[178]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[9c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[179]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[17a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[17b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[17c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[17d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[17e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[17f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[68]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[180]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[94]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[96]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[181]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[98]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2608 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; TCP_Program &rArr; TCP_Connect &rArr; ESP8266_Link_Server &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[c8]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[183]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[9d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>USBHS_EP1_In_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USBHS_EP1_Out_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USBHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USBHS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_gd32f407.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[184]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u5_printf
</UL>

<P><STRONG><a name="[a1]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_InAT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_TIM_50ms
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Link_Server
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Enable_MultipleId
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AT_JoinAP
</UL>

<P><STRONG><a name="[a4]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[76]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[aa]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[7c]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[84]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[6e]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[ab]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[ae]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Http_Download_Header
</UL>

<P><STRONG><a name="[d5]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connect
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Check_AT_Response
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Http_Download_Header
</UL>

<P><STRONG><a name="[d0]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Net_Mode_Choose
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Link_Server
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Enable_MultipleId
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AT_JoinAP
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AT_BaudRate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AT_ATEO
</UL>

<P><STRONG><a name="[f9]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u5_printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIAPBin
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Revice
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Http_Download_Header
</UL>

<P><STRONG><a name="[b1]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[185]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Link_Server
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[18e]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[a6]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[a7]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a8]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a9]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6c]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[a0]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[60]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> vsprintf.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[86]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[88]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[a2]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b5]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[7e]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[b8]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[7a]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[82]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[b0]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[194]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[b7]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[195]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c3]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[c4]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[8a]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[8c]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[ba]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[b4]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[b6]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[95]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[90]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[c2]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[c5]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[bc]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9a]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[15e]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[bd]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ca]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[c9]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[cb]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[cc]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[be]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bf]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cd]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>ESP8266_AT_ATEO</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, esp8266.o(i.ESP8266_AT_ATEO))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ESP8266_AT_ATEO &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u5_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_config
</UL>

<P><STRONG><a name="[d1]"></a>ESP8266_AT_BaudRate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, esp8266.o(i.ESP8266_AT_BaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ESP8266_AT_BaudRate &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u5_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_config
</UL>

<P><STRONG><a name="[d2]"></a>ESP8266_AT_JoinAP</STRONG> (Thumb, 42 bytes, Stack size 136 bytes, esp8266.o(i.ESP8266_AT_JoinAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ESP8266_AT_JoinAP &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u5_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connect
</UL>

<P><STRONG><a name="[d3]"></a>ESP8266_Check_AT_Response</STRONG> (Thumb, 38 bytes, Stack size 112 bytes, esp8266.o(i.ESP8266_Check_AT_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ESP8266_Check_AT_Response &rArr; USART5_Revice
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Revice
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_InAT
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_tcp_off
</UL>

<P><STRONG><a name="[d6]"></a>ESP8266_Enable_MultipleId</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, esp8266.o(i.ESP8266_Enable_MultipleId))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ESP8266_Enable_MultipleId &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u5_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connect
</UL>

<P><STRONG><a name="[d7]"></a>ESP8266_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, esp8266.o(i.ESP8266_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ESP8266_Init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Rst
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[dc]"></a>ESP8266_Link_Server</STRONG> (Thumb, 120 bytes, Stack size 248 bytes, esp8266.o(i.ESP8266_Link_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ESP8266_Link_Server &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u5_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connect
</UL>

<P><STRONG><a name="[de]"></a>ESP8266_Net_Mode_Choose</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, esp8266.o(i.ESP8266_Net_Mode_Choose))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ESP8266_Net_Mode_Choose &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u5_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_config
</UL>

<P><STRONG><a name="[db]"></a>ESP8266_Rst</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, esp8266.o(i.ESP8266_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESP8266_Rst
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>

<P><STRONG><a name="[e2]"></a>ESP8266_tcp_off</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, tcp.o(i.ESP8266_tcp_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ESP8266_tcp_off &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u5_printf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Check_AT_Response
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Program
</UL>

<P><STRONG><a name="[24]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.EXTI5_9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI5_9_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>Flash_EraseSector</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nand_flash.o(i.Flash_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Flash_EraseSector &rArr; Flash_WaitNobusy &rArr; Flash_ReadSR &rArr; spi_master_recv_some_bytes &rArr; spi_master_send_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_send_recv_byte
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteEnable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WaitNobusy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteSomeBytes
</UL>

<P><STRONG><a name="[e9]"></a>Flash_ReadSR</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nand_flash.o(i.Flash_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Flash_ReadSR &rArr; spi_master_recv_some_bytes &rArr; spi_master_send_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_send_recv_byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_recv_some_bytes
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WaitNobusy
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>Flash_ReadSomeBytes</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nand_flash.o(i.Flash_ReadSomeBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Flash_ReadSomeBytes &rArr; spi_master_recv_some_bytes &rArr; spi_master_send_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_send_recv_byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_recv_some_bytes
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteSomeBytes
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>Flash_WaitNobusy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nand_flash.o(i.Flash_WaitNobusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Flash_WaitNobusy &rArr; Flash_ReadSR &rArr; spi_master_recv_some_bytes &rArr; spi_master_send_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePage
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteSR
</UL>

<P><STRONG><a name="[ec]"></a>Flash_WriteDisable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nand_flash.o(i.Flash_WriteDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_WriteDisable &rArr; spi_master_send_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_send_recv_byte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteSomeBytes
</UL>

<P><STRONG><a name="[e5]"></a>Flash_WriteEnable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nand_flash.o(i.Flash_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_WriteEnable &rArr; spi_master_send_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_send_recv_byte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePage
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteSR
</UL>

<P><STRONG><a name="[ed]"></a>Flash_WriteNoCheck</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nand_flash.o(i.Flash_WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Flash_WriteNoCheck &rArr; Flash_WritePage &rArr; Flash_WaitNobusy &rArr; Flash_ReadSR &rArr; spi_master_recv_some_bytes &rArr; spi_master_send_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteSomeBytes
</UL>

<P><STRONG><a name="[ee]"></a>Flash_WritePage</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nand_flash.o(i.Flash_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Flash_WritePage &rArr; Flash_WaitNobusy &rArr; Flash_ReadSR &rArr; spi_master_recv_some_bytes &rArr; spi_master_send_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_send_recv_byte
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteEnable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WaitNobusy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteNoCheck
</UL>

<P><STRONG><a name="[ef]"></a>Flash_WriteSR</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nand_flash.o(i.Flash_WriteSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Flash_WriteSR &rArr; Flash_WaitNobusy &rArr; Flash_ReadSR &rArr; spi_master_recv_some_bytes &rArr; spi_master_send_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_send_recv_byte
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteEnable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WaitNobusy
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>Flash_WriteSomeBytes</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, nand_flash.o(i.Flash_WriteSomeBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Flash_WriteSomeBytes &rArr; Flash_WriteNoCheck &rArr; Flash_WritePage &rArr; Flash_WaitNobusy &rArr; Flash_ReadSR &rArr; spi_master_recv_some_bytes &rArr; spi_master_send_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteNoCheck
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteDisable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadSomeBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>GDFLASH_GetFlashSector</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, gdflash.o(i.GDFLASH_GetFlashSector))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFLASH_Write
</UL>

<P><STRONG><a name="[f3]"></a>GDFLASH_ReadWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gdflash.o(i.GDFLASH_ReadWord))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFLASH_Write
</UL>

<P><STRONG><a name="[f1]"></a>GDFLASH_Write</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, gdflash.o(i.GDFLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GDFLASH_Write &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFLASH_ReadWord
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFLASH_GetFlashSector
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_sector_erase
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_App_Info
</UL>

<P><STRONG><a name="[f8]"></a>GetIAPBin</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, http.o(i.GetIAPBin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GetIAPBin &rArr; TCP_Send_Data &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>Handle_Http_Download_Header</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, http.o(i.Handle_Http_Download_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Handle_Http_Download_Header &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>IC_Informatin</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, program.o(i.IC_Informatin))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[fd]"></a>IIC0_Init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, iic.o(i.IIC0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = IIC0_Init &rArr; IIC_Config &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[ff]"></a>IIC_Config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, iic.o(i.IIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = IIC_Config &rArr; i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_mode_addr_config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Init
</UL>

<P><STRONG><a name="[106]"></a>LED_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LED_Init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[107]"></a>LED_OFF</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led.o(i.LED_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>LED_ON</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led.o(i.LED_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>MPU6050ReadAcc2Real</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, mpu6050_1.o(i.MPU6050ReadAcc2Real))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU6050ReadAcc2Real &rArr; MPU6050_ReadData &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>MPU6050ReadGyro2Real</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, mpu6050_1.o(i.MPU6050ReadGyro2Real))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU6050ReadGyro2Real &rArr; MPU6050_ReadData &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>MPU6050ReadID</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mpu6050_1.o(i.MPU6050ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MPU6050ReadID &rArr; MPU6050_ReadData &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[10d]"></a>MPU6050_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mpu6050_1.o(i.MPU6050_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU6050_Init &rArr; MPU_INT_Init &rArr; Motion_Interrupt &rArr; MPU6050_WriteReg &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_INT_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[10a]"></a>MPU6050_ReadData</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, mpu6050_1.o(i.MPU6050_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MPU6050_ReadData &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_enable
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_receive
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ackpos_config
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ack_config
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050ReadID
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050ReadGyro2Real
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050ReadAcc2Real
</UL>

<P><STRONG><a name="[10e]"></a>MPU6050_WriteReg</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, mpu6050_1.o(i.MPU6050_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MPU6050_WriteReg &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop_on_bus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start_on_bus
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_addressing
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_get
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_flag_clear
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Interrupt
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_INT_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[10f]"></a>MPU_INT_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mpu6050_1.o(i.MPU_INT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_INT_Init &rArr; Motion_Interrupt &rArr; MPU6050_WriteReg &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Interrupt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>Motion_Interrupt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mpu6050_1.o(i.Motion_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motion_Interrupt &rArr; MPU6050_WriteReg &rArr; i2c_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_INT_Init
</UL>

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>Program_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, program.o(i.Program_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Program_Init &rArr; USART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050ReadID
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_App_Info
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Informatin
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>SFLASH_ReadID</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, nand_flash.o(i.SFLASH_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SFLASH_ReadID &rArr; spi_master_send_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_send_recv_byte
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>SPI_Init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_Init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_struct_para_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>Set_App_Info</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, program.o(i.Set_App_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Set_App_Info &rArr; GDFLASH_Write &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SystemInit</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, system_gd32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>TCP_Connect</STRONG> (Thumb, 298 bytes, Stack size 112 bytes, tcp.o(i.TCP_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = TCP_Connect &rArr; ESP8266_Link_Server &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Link_Server
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Enable_MultipleId
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AT_JoinAP
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Revice
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Program
</UL>

<P><STRONG><a name="[12c]"></a>TCP_InAT</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, tcp.o(i.TCP_InAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TCP_InAT &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Clear
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u5_printf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Check_AT_Response
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Program
</UL>

<P><STRONG><a name="[12e]"></a>TCP_Program</STRONG> (Thumb, 370 bytes, Stack size 8 bytes, tcp.o(i.TCP_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = TCP_Program &rArr; TCP_Connect &rArr; ESP8266_Link_Server &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_gprs
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_config
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Restart_Program
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Restart
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_InAT
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connect
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_tcp_off
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>TCP_Restart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tcp.o(i.TCP_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TCP_Restart
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Program
</UL>

<P><STRONG><a name="[12f]"></a>TCP_Restart_Program</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, tcp.o(i.TCP_Restart_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TCP_Restart_Program
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Program
</UL>

<P><STRONG><a name="[fa]"></a>TCP_Send_Data</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp.o(i.TCP_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = TCP_Send_Data &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Send
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u5_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIAPBin
</UL>

<P><STRONG><a name="[136]"></a>TCP_TIM_1ms</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tcp.o(i.TCP_TIM_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>TCP_config</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, tcp.o(i.TCP_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TCP_config &rArr; ESP8266_Net_Mode_Choose &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Net_Mode_Choose
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Check_AT_Response
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AT_BaudRate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AT_ATEO
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Program
</UL>

<P><STRONG><a name="[132]"></a>TCP_gprs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.TCP_gprs))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Program
</UL>

<P><STRONG><a name="[154]"></a>TIMER1_1000ms</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer.o(i.TIMER1_1000ms))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>TIMER1_100ms</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer.o(i.TIMER1_100ms))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[153]"></a>TIMER1_200ms</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer.o(i.TIMER1_200ms))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>TIMER1_50ms</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer.o(i.TIMER1_50ms))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_TIM_1ms
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_TIM_1ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>TIMER1_Init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, timer.o(i.TIMER1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER1_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_timer_clock_prescaler_config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[2a]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>TIMER2_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, timer.o(i.TIMER2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER2_Init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_timer_clock_prescaler_config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[151]"></a>U32ToU8Array</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, program.o(i.U32ToU8Array))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>USART0_Config</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, usart.o(i.USART0_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART0_Config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[32]"></a>USART0_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usart.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART0_IRQHandler &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>USART0_TIM_50ms</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usart.o(i.USART0_TIM_50ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = USART0_TIM_50ms &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>USART5_Clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(i.USART5_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_InAT
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Revice
</UL>

<P><STRONG><a name="[142]"></a>USART5_Config</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usart.o(i.USART5_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART5_Config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[54]"></a>USART5_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, usart.o(i.USART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART5_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>USART5_Revice</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usart.o(i.USART5_Revice))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART5_Revice
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Connect
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Check_AT_Response
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>USART5_Send</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usart.o(i.USART5_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART5_Send &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_Data
</UL>

<P><STRONG><a name="[137]"></a>USART5_TIM_1ms</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usart.o(i.USART5_TIM_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>USART_Init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USART_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[ac]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[9e]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[e0]"></a>delay_1ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systick.o(i.delay_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePage
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteEnable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteDisable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_Data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Rst
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFLASH_ReadID
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteSR
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadSomeBytes
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadSR
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>delay_decrement</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(i.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[101]"></a>exti_init</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, gd32f4xx_exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Init
</UL>

<P><STRONG><a name="[e3]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>fmc_lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_fmc.o(i.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFLASH_Write
</UL>

<P><STRONG><a name="[14d]"></a>fmc_ready_wait</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32f4xx_fmc.o(i.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_sector_erase
</UL>

<P><STRONG><a name="[f5]"></a>fmc_sector_erase</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, gd32f4xx_fmc.o(i.fmc_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_sector_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFLASH_Write
</UL>

<P><STRONG><a name="[14e]"></a>fmc_state_get</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gd32f4xx_fmc.o(i.fmc_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[f2]"></a>fmc_unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f4xx_fmc.o(i.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFLASH_Write
</UL>

<P><STRONG><a name="[f6]"></a>fmc_word_program</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gd32f4xx_fmc.o(i.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDFLASH_Write
</UL>

<P><STRONG><a name="[62]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[fe]"></a>gpio_af_set</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Init
</UL>

<P><STRONG><a name="[df]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Restart_Program
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Restart
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Rst
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
</UL>

<P><STRONG><a name="[e1]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Restart_Program
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Rst
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
</UL>

<P><STRONG><a name="[e7]"></a>gpio_bit_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePage
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteEnable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteDisable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFLASH_ReadID
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteSR
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadSomeBytes
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadSR
</UL>

<P><STRONG><a name="[d9]"></a>gpio_mode_set</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>

<P><STRONG><a name="[da]"></a>gpio_output_options_set</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>

<P><STRONG><a name="[105]"></a>i2c_ack_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f4xx_i2c.o(i.i2c_ack_config))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Config
</UL>

<P><STRONG><a name="[111]"></a>i2c_ackpos_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_i2c.o(i.i2c_ackpos_config))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>

<P><STRONG><a name="[102]"></a>i2c_clock_config</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, gd32f4xx_i2c.o(i.i2c_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = i2c_clock_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Config
</UL>

<P><STRONG><a name="[117]"></a>i2c_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_i2c.o(i.i2c_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>

<P><STRONG><a name="[115]"></a>i2c_data_transmit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_i2c.o(i.i2c_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>

<P><STRONG><a name="[104]"></a>i2c_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_i2c.o(i.i2c_enable))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Config
</UL>

<P><STRONG><a name="[114]"></a>i2c_flag_clear</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f4xx_i2c.o(i.i2c_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>

<P><STRONG><a name="[110]"></a>i2c_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f4xx_i2c.o(i.i2c_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>

<P><STRONG><a name="[113]"></a>i2c_master_addressing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f4xx_i2c.o(i.i2c_master_addressing))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>

<P><STRONG><a name="[103]"></a>i2c_mode_addr_config</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gd32f4xx_i2c.o(i.i2c_mode_addr_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_mode_addr_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Config
</UL>

<P><STRONG><a name="[112]"></a>i2c_start_on_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_i2c.o(i.i2c_start_on_bus))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>

<P><STRONG><a name="[116]"></a>i2c_stop_on_bus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_i2c.o(i.i2c_stop_on_bus))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_WriteReg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_ReadData
</UL>

<P><STRONG><a name="[99]"></a>main</STRONG> (Thumb, 278 bytes, Stack size 2088 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2608 + Unknown Stack Size
<LI>Call Chain = main &rArr; TCP_Program &rArr; TCP_Connect &rArr; ESP8266_Link_Server &rArr; u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Revice
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_TIM_50ms
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U32ToU8Array
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_50ms
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_200ms
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_100ms
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_1000ms
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Program
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFLASH_ReadID
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050ReadGyro2Real
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050ReadAcc2Real
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Http_Download_Header
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIAPBin
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteSomeBytes
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteSR
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadSomeBytes
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[64]"></a>my_mem_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(i.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_mem_init &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[156]"></a>my_mem_malloc</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, malloc.o(i.my_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>

<P><STRONG><a name="[65]"></a>my_mem_perused</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(i.my_mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_perused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[121]"></a>mymalloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, malloc.o(i.mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[155]"></a>mymemset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, malloc.o(i.mymemset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
</UL>

<P><STRONG><a name="[100]"></a>nvic_irq_enable</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, gd32f4xx_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Init
</UL>

<P><STRONG><a name="[13b]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
</UL>

<P><STRONG><a name="[11b]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[14f]"></a>rcu_clock_freq_get</STRONG> (Thumb, 264 bytes, Stack size 84 bytes, gd32f4xx_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_clock_config
</UL>

<P><STRONG><a name="[d8]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC0_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>

<P><STRONG><a name="[158]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
</UL>

<P><STRONG><a name="[157]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_deinit
</UL>

<P><STRONG><a name="[138]"></a>rcu_timer_clock_prescaler_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_timer_clock_prescaler_config))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
</UL>

<P><STRONG><a name="[128]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[15b]"></a>spi_i2s_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_send_recv_byte
</UL>

<P><STRONG><a name="[15a]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_send_recv_byte
</UL>

<P><STRONG><a name="[125]"></a>spi_i2s_deinit</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, gd32f4xx_spi.o(i.spi_i2s_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_i2s_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[159]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_send_recv_byte
</UL>

<P><STRONG><a name="[127]"></a>spi_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[ea]"></a>spi_master_recv_some_bytes</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nand_flash.o(i.spi_master_recv_some_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_master_recv_some_bytes &rArr; spi_master_send_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_send_recv_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadSomeBytes
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadSR
</UL>

<P><STRONG><a name="[e8]"></a>spi_master_send_recv_byte</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nand_flash.o(i.spi_master_send_recv_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_master_send_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_recv_some_bytes
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WritePage
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteEnable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteDisable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EraseSector
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFLASH_ReadID
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteSR
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadSomeBytes
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadSR
</UL>

<P><STRONG><a name="[126]"></a>spi_struct_para_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[11a]"></a>systick_config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, systick.o(i.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systick_config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[13d]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
</UL>

<P><STRONG><a name="[139]"></a>timer_deinit</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, gd32f4xx_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
</UL>

<P><STRONG><a name="[11f]"></a>timer_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Init
</UL>

<P><STRONG><a name="[13e]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
</UL>

<P><STRONG><a name="[135]"></a>timer_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>timer_init</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
</UL>

<P><STRONG><a name="[13c]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init
</UL>

<P><STRONG><a name="[134]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>u5_printf</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, usart.o(i.u5_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = u5_printf &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_Send_Data
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCP_InAT
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_tcp_off
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Net_Mode_Choose
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Link_Server
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Enable_MultipleId
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AT_JoinAP
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AT_BaudRate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_AT_ATEO
</UL>

<P><STRONG><a name="[145]"></a>usart_baudrate_set</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, gd32f4xx_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[144]"></a>usart_deinit</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[14b]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[140]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Send
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u5_printf
</UL>

<P><STRONG><a name="[14c]"></a>usart_interrupt_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[143]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32f4xx_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[14a]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[147]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[149]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[146]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[63]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[8e]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[196]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[197]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[70]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[74]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[15c]"></a>system_clock_168m_8m_hxtal</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, system_gd32f4xx.o(i.system_clock_168m_8m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[12a]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f4xx.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_168m_8m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[15d]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[61]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
